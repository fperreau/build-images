---
#
# GENERATE AUTO INSTALL ISO
#
- name: Generate configuration file '{{ DOMAIN }}/{{ CFG }}'.
  template:
    src: "{{ NAME }}/{{ CFG }}"
    dest: "{{ NAME }}/build/{{ CFG }}"
  vars:
    DISK: sda
  register: result
- name: Generate ISO image with AutoInstall file.
  command: genisoimage -V OEMDRV -o {{ KS_ISO }} {{ CFG }}
  args:
    chdir: "{{ NAME }}/build"
    creates: "{{ KS_ISO }}"
  when: result is changed
- name: Copy auto install ISO in datastore.
  vsphere_copy:
    datacenter: "{{ datacenter }}"
    datastore: "{{ datastore }}"
    hostname: "{{ vcenter }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    src: "{{ NAME }}/build/{{ KS_ISO }}"
    path: "{{ VMW_DIR }}/{{ KS_ISO }}"
  when: result is changed

#
# CREATE TEMPLATE IMAGE
#
- name: Checking domain locked '{{ NAME }}/build/{{ DOMAIN }}.lock'.
  stat:
    path: "{{ NAME }}/build/{{ DOMAIN }}.lock"
  register: domain_lock 
- block:
  - name: Create auto install server '{{ DOMAIN | upper }}'.
    vmware_guest:
      hostname: "{{ vcenter }}"
      username: "{{ username }}"
      password: "{{ password }}"
      datacenter: "{{ datacenter }}"
      esxi_hostname: "{{ esxhost }}"
      validate_certs: "{{ validate_certs }}"
      folder: "{{ folder }}"
      name: "{{ DOMAIN }}"
      state: present
      guest_id: "{{ OS.vmw }}"
      disk:
        - size_gb: "{{ SIZE }}"
          datastore: "{{ datastore }}"
          thin:
      cdrom:
        - type: iso
          iso_path: "[{{ datastore }}] {{ VMW_DIR }}/{{ ISO }}"
          controller_number: 0
          unit_number: 0
        - type: iso
          iso_path: "[{{ datastore }}] {{ VMW_DIR }}/{{ KS_ISO }}"
          controller_number: 0
          unit_number: 1
      networks:
        - name: VM Network
      wait_for_ip_address: yes
      hardware:
        num_cpus: 2
        memory_mb: 2048
        boot_firmware: bios
  - name: Unattach 1er cdrom and remove 2nd cdrom of server '{{ DOMAIN | upper }}'.
    vmware_guest:
      hostname: "{{ vcenter }}"
      username: "{{ username }}"
      password: "{{ password }}"
      name: "{{ DOMAIN }}"
      validate_certs: "{{ validate_certs }}"
      cdrom:
        - type: none
          controller_number: 0
          unit_number: 0
        - type: none
          controller_number: 0
          unit_number: 1
          state: absent
  - name: Set '{{ DOMAIN | upper }}' server to template.
    vmware_guest:
      hostname: "{{ vcenter }}"
      username: "{{ username }}"
      password: "{{ password }}"
      datacenter: "{{ datacenter }}"
      esxi_hostname: "{{ esxhost }}"
      validate_certs: "{{ validate_certs }}"
      folder: "{{ folder }}"
      name: "{{ DOMAIN }}"
      is_template: true
  - name: Locked existing domain '{{ NAME }}/build/{{ DOMAIN }}.lock'.
    file:
      path: "{{ NAME }}/build/{{ DOMAIN }}.lock"
      state: touch
  when: not domain_lock.stat.exists

#
# EXPORT OVA TEMPLATE IMAGE
#
- name: Check if OVA exist.
  stat:
    path: "{{ NAME }}/build/{{ NAME }}.ova"
  register: ova_file
- name: Export OVF in '{{ NAME }}/build/{{ DOMAIN }}' directory.
  vmware_export_ovf:
    datacenter: "{{ datacenter }}"
    hostname: "{{ vcenter }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    name: "{{ DOMAIN  }}"
    export_with_images: false
    export_dir: "{{ NAME }}/build"
  when: not ova_file.stat.exists
- name: Create OVA in '{{ NAME }}/build' directory.
  shell: tar -cvSf ../{{ NAME }}.ova *
  args:
    chdir: "{{ NAME }}/build/{{ NAME }}"
    creates: "{{ NAME }}.ova"
    warn: false
- name: Remove OVF files server.
  file:
    path: "{{ NAME }}/build/{{ NAME }}"
    state: absent
- name: Change build owner.
  file:
    path: "{{ NAME }}/build/"
    owner: perreau
    group: kvm
    recurse: yes

#
# CLEAN
#
- name: Delete template '{{ DOMAIN | upper }}'.
  vmware_guest:
    hostname: "{{ vcenter }}"
    username: "{{ username }}"
    password: "{{ password }}"
    datacenter: "{{ datacenter }}"
    esxi_hostname: "{{ esxhost }}"
    validate_certs: "{{ validate_certs }}"
    folder: "{{ folder }}"
    name: "{{ DOMAIN }}"
    state: absent
  when: DELETE_IMAGES